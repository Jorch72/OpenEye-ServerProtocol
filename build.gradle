apply plugin: 'java'
apply plugin: 'eclipse'

version = '1.0'
group = 'openeye'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '12.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
}

jar {
    archiveName "OpenEye-protocol-${version}.jar"
}

def in_jenkins = false

def env = System.getenv()

def jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()

if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

def gitManifest = manifest {
    if (branch != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

project.tasks.withType(Jar.class) {
    manifest {
        from jenkinsManifest, gitManifest
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task wrapper (type: Wrapper) {
    gradleVersion = "2.12"
}